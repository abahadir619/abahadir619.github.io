/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../../LOLCODE.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var LOLCODEHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 'keyword.lol',
           regex: '\\b(?:\\W|^)(?:HAI|R|AN|TIL|MAEK|LOOP|KTHXBAI|I\\sFOUND|IM\\sIN|IM\\sOUTTA|MKAY|LOL|GTFO)(?:\\W|$)\\b' },
         { token: 'support.function.LOLCODE.lol',
           regex: '(?:\\W|^)SUMZ\\sOF|SUM\\sOF|DIFF\\sOF|DIFFZ\\sOF|QUOSHUNT\\sOF|QUOSHUNTZ\\sOF|PRODUKTZ\\sOF|PRODUKT\\sOF|MODZ\\sOF|MOD\\sOF|BIGGR\\sOF|SMALLR\\sOF' },
         { token: 'support.function.LOLCODE.lol',
           regex: '(?:\\W|^)BOTH\\sOF|EITHER\\sOF|WON\\sOF|NOT|ALL\\sOF|ANY\\sOF' },
         { token: 'support.function.LOLCODE.lol',
           regex: 'BOTH\\sSAEM|DIFFRINT' },
         { token: 'support.function.LOLCODE.lol',
           regex: '\\s(?:\\W|^)UP|UPPIN|YR' },
         { token: 'support.function.LOLCODE.lol',
           regex: '(?:\\W|^)COMPLAIN|VISIBLE|GIMMEH' },
         { token: 'storage.type.lol',
           regex: '(?:\\W|^)TROOF|YARN|NOOB|NUMBAR|NUMBR' },
         { token: 'keyword.lol', regex: '(?:\\W|^)WIN|FAIL' },
         { token: 'string.quoted.other.lt-gt.include.lol',
           regex: '(?:\\W|^)OIC|OMG|OMGWTF|MEBBE|WTF\\?' },
         { token: 'string.quoted.other.include.lol',
           regex: '^\\s*\\s*CAN\\sHAZ\\b\\s+',
           push: 
            [ { token: 'string.quoted.other.include.lol',
                regex: '\\?',
                next: 'pop' },
              { defaultToken: 'string.quoted.other.include.lol' } ] },
         { token: 
            [ 'string.quoted.other.include.lol',
              'keyword.control.import.include.lol' ],
           regex: '(\\s*\\s*ITZ\\s*)((?:ALL|A)*)',
           push: 
            [ { token: [], regex: '$', next: 'pop' },
              { defaultToken: 'string.quoted.other.include.lol' } ] },
         { token: 'keyword.lol', regex: '\\s*\\s*IN\\sMAH' },
         { token: 'support.function.STL.lol',
           regex: '^\\s*HOW\\sDUZ\\sI',
           push: 
            [ { token: 'support.function.STL.lol', regex: '\\s', next: 'pop' },
              { defaultToken: 'support.function.STL.lol' } ] },
         { token: 'string.quoted.other.lt-gt.include.lol',
           regex: '^\\s*\\s*I\\sHAS\\sA\\b\\s+' },
         { token: 'string.quoted.other.lt-gt.include.lol',
           regex: '\\s*\\s*O\\sRLY\\?' },
         { token: 'string.quoted.other.lt-gt.include.lol',
           regex: '\\s*\\s*YA\\sRLY' },
         { token: 'string.quoted.other.lt-gt.include.lol',
           regex: '\\s*\\s*NO\\sWAI' },
         { token: 'meta.keyword.include.lol',
           regex: '^\\s*IF\\sU\\sSAY\\sSO',
           push: 
            [ { token: 'meta.keyword.include.lol', regex: '$', next: 'pop' },
              { defaultToken: 'support.function.STL.lol' } ] },
         { token: 'punctuation.definition.string.begin.lol',
           regex: '"',
           push: 
            [ { token: 'punctuation.definition.string.begin.lol',
                regex: '"',
                next: 'pop' },
              { defaultToken: 'string.quoted.double.lol' } ] },
         { todo: 
            { patterns: 
               [ { captures: { '1': { name: 'meta.toc-list.banner.block.lol' } },
                   match: 'BTW',
                   name: 'comment.block.lol' },
                 { begin: 'OBTW', end: 'TLDR', name: 'comment.block.lol' },
                 { begin: 'OBTW',
                   end: 'TLDR.*\\n',
                   name: 'invalid.illegal.stray-comment-end.lol' } ] } } ] }
    
    this.normalizeRules();
};

LOLCODEHighlightRules.metaData = { fileTypes: [ 'lol' ],
      name: 'LOLCODE',
      scopeName: 'source.lol' }


oop.inherits(LOLCODEHighlightRules, TextHighlightRules);

exports.LOLCODEHighlightRules = LOLCODEHighlightRules;
});